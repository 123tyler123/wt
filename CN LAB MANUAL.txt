----------------------------------------------Experiment:- 7-----------------------------------------------------------------

Aim:- Implement data encryption and data decryption


#include <stdio.h>
int main()
{
   int i, x;
   char str[100];
  printf("\nPlease enter a string:\t");
   gets(str);
 printf("\nPlease choose following options:\n");
   printf("1 = Encrypt the string.\n");
   printf("2 = Decrypt the string.\n");
   scanf("%d", &x);
   //using switch case statements
   switch(x)
   {
   case 1:
      for(i = 0; (i < 100 && str[i] != '\0'); i++)
        str[i] = str[i] + 3; //the key for encryption is 3 that is added to ASCII value
      printf("\nEncrypted string: %s\n", str);
      break;
 case 2:
      for(i = 0; (i < 100 && str[i] != '\0'); i++)
        str[i] = str[i] - 3; //the key for encryption is 3 that is subtracted to ASCII value

      printf("\nDecrypted string: %s\n", str);
      break;
 default:
      printf("\nError\n");
   }
   return 0;
}

--------------------------------------------------EXPERIMENT-6----------------------------------------------------------------

AIM: Implement distance vector routing algorithm for obtaining routing tables at each node.


 
SOURCE CODE:
#include<stdio.h>
#include<conio.h>
struct node
{
unsigned dist[20];
unsigned from[20];
}rt[10];
int main()
{
int dmat[20][20];
int n,i,j,k,count=0;
clrscr();
printf("\n Enter the number of nodes : ");
scanf("%d",&n);
printf("Enter the cost matrix :\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
{
scanf("%d",&dmat[i][j]);
dmat[i][i]=0;
rt[i].dist[j]=dmat[i][j];
rt[i].from[j]=j;
}
do
{
count=0;
for(i=0;i<n;i++)
for(j=0;j<n;j++)
for(k=0;k<n;k++)
if(rt[i].dist[j]>dmat[i][k]+rt[k].dist[j])
{
rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
rt[i].from[j]=k;
count++;
}
}while(count!=0);
for(i=0;i<n;i++)
{
printf("\nState value for router %d is \n",i+1);
for(j=0;j<n;j++)
{
printf("\nnode %d via %d Distance%d",j+1,rt[i].from[j]+1,rt[i].dist[j]);
}
}
printf("\n");
}
------------------------------------------------------ EXPERIMENT-8----------------------------------------------------------


Write a program for congestion control using leaky bucket algorithm



#include <bits/stdc++.h>
#include <chrono>
#include <thread>

using namespace std;

class Packet {
    int id, size;
public:
    Packet(int id, int size) {
        this->id = id;
        this->size = size;
    }
    int getSize() {
        return this->size;
    }
    int getId() {
        return this->id;
    }
};

class LeakyBucket {
    int leakRate, bufferSizeLimit, currBufferSize;
    queue<Packet> buffer;
public:
    LeakyBucket(int leakRate, int size) {
        this->leakRate = leakRate;
        this->bufferSizeLimit = size;
        this->currBufferSize = 0;
    }
    void addPacket(Packet newPacket) {
        if(currBufferSize + newPacket.getSize() > bufferSizeLimit) {
            cout << "Bucket is full. Packet rejected." << endl;
            return ;
        }
        buffer.push(newPacket);
        currBufferSize += newPacket.getSize();
        cout << "Packet with id = " << newPacket.getId() <<  " added to bucket." << endl;
    }
    void transmit() {
        if(buffer.size() == 0) {
            cout << "No packets in the bucket." << endl;
            return ;
        }
        int n = leakRate;
        while(buffer.empty() == 0) {
            Packet topPacket = buffer.front();
            int topPacketSize = topPacket.getSize();
            if(topPacketSize > n) break;
            n = n - topPacketSize;
            currBufferSize -= topPacketSize;
            buffer.pop();
            cout << "Packet with id = " << topPacket.getId() << " transmitted." << endl;
        }
    }
};

int main() {
    int n;
    n = 5;
    LeakyBucket* bucket = new LeakyBucket(1000, 10000);
    bucket->addPacket(Packet(1, 200));
    bucket->addPacket(Packet(2, 500));
    bucket->addPacket(Packet(3, 400));
    bucket->addPacket(Packet(4, 500));
    bucket->addPacket(Packet(5, 200));
    for(int i=0;i<=n;i++) {
        bucket->transmit();
        cout << "Waiting for next tick." << endl;
        // std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    }
}


------------------------------------------------------- EXPERIMENT-5----------------------------------------------------------



PROGRAM TO IMPLEMENT BROADCAST ROUTING ALGORITHM




#include<stdio.h>
int a[10][10],n;
void main()
{
int i,j,root;
printf("Enter no.of nodes:");
scanf("%d",&n);
printf("Enter adjacent matrix\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
{
printf("Enter connecting of %d-->%d::",i,j);
scanf("%d",&a[i][j]);
}
printf("Enter root node:");
scanf("%d",&root);
adj(root);
}
adj(int k)
{
int i,j;
printf("Adjacent node of root node::\n");
printf("%d\n\n",k);
for(j=1;j<=n;j++)
{
if(a[k][j]==1 || a[j][k]==1)
printf("%d\t",j);
}
printf("\n");
for(i=1;i<=n;i++)
{
if((a[k][j]==0) && (a[i][k]==0) && (i!=k))
printf("%d",i);
}
}

                                    
--------------------------------------------------- EXPERIMENT-4-----------------------------------------------------------------


Shortest Path routing



#include<stdio.h>
#define INFINITY 9999
#define MAX 10
 
void dijkstra(int G[MAX][MAX],int n,int startnode);
 
int main()
{
int G[MAX][MAX],i,j,n,u;
printf("Enter no. of vertices:");
scanf("%d",&n);
printf("\nEnter the adjacency matrix:\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&G[i][j]);
printf("\nEnter the starting node:");
scanf("%d",&u);
dijkstra(G,n,u);
return 0;
}
 
void dijkstra(int G[MAX][MAX],int n,int startnode)
{
 
int cost[MAX][MAX],distance[MAX],pred[MAX];
int visited[MAX],count,mindistance,nextnode,i,j;
//pred[] stores the predecessor of each node
//count gives the number of nodes seen so far
//create the cost matrix
for(i=0;i<n;i++)
for(j=0;j<n;j++)
if(G[i][j]==0)
cost[i][j]=INFINITY;
else
cost[i][j]=G[i][j];
//initialize pred[],distance[] and visited[]
for(i=0;i<n;i++)
{
distance[i]=cost[startnode][i];
pred[i]=startnode;
visited[i]=0;
}
distance[startnode]=0;
visited[startnode]=1;
count=1;
while(count<n-1)
{
mindistance=INFINITY;
//nextnode gives the node at minimum distance
for(i=0;i<n;i++)
if(distance[i]<mindistance&&!visited[i])
{
mindistance=distance[i];
nextnode=i;
}
//check if a better path exists through nextnode
visited[nextnode]=1;
for(i=0;i<n;i++)
if(!visited[i])
if(mindistance+cost[nextnode][i]<distance[i])
{
distance[i]=mindistance+cost[nextnode][i];
pred[i]=nextnode;
}
count++;
}
 
//print the path and distance of each node
for(i=0;i<n;i++)
if(i!=startnode)
{
printf("\nDistance of node%d=%d",i,distance[i]);
printf("\nPath=%d",i);
j=i;
do
{
j=pred[j];
printf("<-%d",j);
}while(j!=startnode);
}
}

---------------------------------------------------- EXPERIMENT-2----------------------------------------------------------------------

CRC:
CRC ----->



#include<stdio.h>
#include<conio.h>
int frame[50],msg[50],key[20]={0},temp[20];
int n,fl,k,ch,i,j;
void main()
{
void read();
void crc();
printf("\n\t\tCRC\n");
read();
crc();
getch();
}
void read()
{
printf("\nEnter the frame length:");
scanf("%d",&fl);
printf("\nEnter the frame:");
for(i=0;i<fl;i++)
scanf("%d",&frame[i]);
printf("\n1:CRC-10\t2:CRC-16\t3:CRC-CCITT\n");
scanf("%d",&ch);
if(ch==1)
{
key[0]=key[1]=key[9]=key[10]=key[11]=key[12]=1;
k=13;
}
else if(ch==2)
{
key[0]=key[1]=key[14]=key[16]=1;
k=17;
}
else if(ch==3)
{
key[0]=key[1]=key[11]=key[16]=1;
k=17;
}
else
printf("\nInvalid Choice");
n=fl+k-1;
printf("\nPolynomial is:");
for(i=0;i<k;i++)
printf("%d",key[i]);
}
void crc()
{
int i,g;
void xor(int);
for(g=1;g<k;g++)
temp[g]=msg[g];
for(i=0;i<fl;i++)
{
if(temp[0]==0)
xor(0);
else
{
if(temp[0]==1)
xor(1);
if(i!=fl)
temp[k-1]=msg[g++];
}
}
printf("\nCheck Sum=\n");
for(i=fl,j=0;i<n;i++,j++)
msg[i]=temp[j];
for(i=0;i<k;i++)
printf("%d",msg[i]);
}
void xor(int x)
{
for(i=1;i<k;i++)
temp[i-1]=(x==0)?temp[i]^0:temp[i]^key[i];
}

--------------------------------------------------------EXPERIMENT-3--------------------------------------------------------------


Sliding Window Protocol:



#include<stdio.h>
int main()
{
int w,i,f,frames[50];
printf("Enter window size: ");
scanf("%d",&w);
printf("\nEnter number of frames to transmit: ");
scanf("%d",&f);
printf("\nEnter %d frames: ",f);
for(i=1;i<=f;i++)
scanf("%d",&frames[i]);
printf("\n With sliding window protocol the frames will be sent in the following manner
(assuming no corruption of frames)\n\n");
printf("After sending %d frames at each stage sender waits for acknowledgement sent by the
receiver\n\n",w);
for(i=1;i<=f;i++)
{
if(i%w==0)
{
printf("%d\n",frames[i]);
printf("Acknowledgement of above frames sent is received by sender\n\n");
}
else
printf("%d ",frames[i]);
}
if(f%w!=0)
printf("\nAcknowledgement of above frames sent is received by sender\n");
return 0;
}
Go-Back â€“N ARQ:
#include<stdio.h>
int main()
{
int windowsize,sent=0,ack,i;
printf("enter window size\n");
scanf("%d",&windowsize);
while(1)
{
for( i = 0; i < windowsize; i++)
{
printf("Frame %d has been transmitted.\n",sent);
sent++;
if(sent == windowsize)
break;
}
printf("\nPlease enter the last Acknowledgement received.\n");
scanf("%d",&ack);
if(ack == windowsize)
break;
else
sent = ack;
}
return 0;
}

